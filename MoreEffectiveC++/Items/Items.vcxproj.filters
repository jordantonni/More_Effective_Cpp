<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <ClCompile Include="Main.cpp" />
    <ClCompile Include="Item 01 Pointers and References.cpp">
      <Filter>1 Basics</Filter>
    </ClCompile>
    <ClCompile Include="Item 03 Arrays are not polymorphic.cpp">
      <Filter>1 Basics</Filter>
    </ClCompile>
    <ClCompile Include="Item 02 CPP style casts.cpp">
      <Filter>1 Basics</Filter>
    </ClCompile>
    <ClCompile Include="Item 04 Dont just make default ctors.cpp">
      <Filter>1 Basics</Filter>
    </ClCompile>
    <ClCompile Include="Item 05 User defined conversion functions.cpp">
      <Filter>2 Operators</Filter>
    </ClCompile>
    <ClCompile Include="Item 06 Prefix and Postfix.cpp">
      <Filter>2 Operators</Filter>
    </ClCompile>
    <ClCompile Include="Item 07 Never overload logical AND OR and comma.cpp">
      <Filter>2 Operators</Filter>
    </ClCompile>
    <ClCompile Include="Item 08 new and delete.cpp">
      <Filter>2 Operators</Filter>
    </ClCompile>
    <ClCompile Include="Item 19 Temporary objects.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 09 Destructors.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 10 Prevent ctor resource leaks.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 11 Prevent exceptions leaving dtors.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 12 Exception throwing and param passing.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 13 Catch exceptions by ref.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 14 Exception specification.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 15 Exception handling costs.cpp">
      <Filter>3 Exceptions</Filter>
    </ClCompile>
    <ClCompile Include="Item 16 80-20 Rule.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 17 Lazy Evaluation.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 18 Amortize expected operations.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 20 Return value optimization.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 21 Overload to stop implicit type conversions.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 22 Prefer free function operators over member ops.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 23 Alternative Libraries.cpp">
      <Filter>4 Efficiency</Filter>
    </ClCompile>
    <ClCompile Include="Item 25 Virtual ctors and free functions.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 26 Limits objects of class.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 27 Requiring heap based objects.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 28 Smart Pointers.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 29 Reference counting.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 30 Proxy Classes.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 31 Double Dispatch.cpp">
      <Filter>5 Techniques</Filter>
    </ClCompile>
    <ClCompile Include="Item 32 Program in future tense.cpp">
      <Filter>6 Miscellany</Filter>
    </ClCompile>
    <ClCompile Include="Item 33 Make non-leaf classes abstract.cpp">
      <Filter>6 Miscellany</Filter>
    </ClCompile>
    <ClCompile Include="Item 34 Combine C with CPP.cpp">
      <Filter>6 Miscellany</Filter>
    </ClCompile>
    <ClCompile Include="Item 35 Language Standard.cpp">
      <Filter>6 Miscellany</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <Filter Include="0 Introduction">
      <UniqueIdentifier>{f7c0cfb3-85eb-45e0-8c67-1b49119e9f9c}</UniqueIdentifier>
    </Filter>
    <Filter Include="1 Basics">
      <UniqueIdentifier>{d74befe4-b096-4f50-a3f3-89f0921149cd}</UniqueIdentifier>
    </Filter>
    <Filter Include="2 Operators">
      <UniqueIdentifier>{06b28163-310e-4646-af41-34628a73a2d8}</UniqueIdentifier>
    </Filter>
    <Filter Include="3 Exceptions">
      <UniqueIdentifier>{365accea-dc00-480a-a611-3602316ec58a}</UniqueIdentifier>
    </Filter>
    <Filter Include="4 Efficiency">
      <UniqueIdentifier>{d139dc33-61e5-486f-bb69-6c0932d7b921}</UniqueIdentifier>
    </Filter>
    <Filter Include="5 Techniques">
      <UniqueIdentifier>{6db655f2-1289-49e5-bcf5-004eabd13979}</UniqueIdentifier>
    </Filter>
    <Filter Include="6 Miscellany">
      <UniqueIdentifier>{53ac3d84-fb3f-48f5-9903-e5eebf994b38}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include="Item 24 Cost of virtual functions inheritance and RTTI.cpp">
      <Filter>4 Efficiency</Filter>
    </None>
  </ItemGroup>
</Project>